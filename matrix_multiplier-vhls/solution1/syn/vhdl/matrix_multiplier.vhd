-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_multiplier is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A : IN STD_LOGIC_VECTOR (31 downto 0);
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_ap_vld : OUT STD_LOGIC;
    m : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrix_multiplier is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_multiplier_matrix_multiplier,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1000,HLS_SYN_LUT=1497,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cmp2_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp2_reg_247 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln9_fu_118_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln9_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln7_fu_141_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln7_reg_260 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln17_fu_150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln17_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln17_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_108_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln17_reg_290 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln14_fu_202_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln14_reg_306 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal x_local_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_local_ce0 : STD_LOGIC;
    signal x_local_we0 : STD_LOGIC;
    signal x_local_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_multiplier_Pipeline_L2_fu_91_ap_start : STD_LOGIC;
    signal grp_matrix_multiplier_Pipeline_L2_fu_91_ap_done : STD_LOGIC;
    signal grp_matrix_multiplier_Pipeline_L2_fu_91_ap_idle : STD_LOGIC;
    signal grp_matrix_multiplier_Pipeline_L2_fu_91_ap_ready : STD_LOGIC;
    signal grp_matrix_multiplier_Pipeline_L2_fu_91_x_local_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix_multiplier_Pipeline_L2_fu_91_x_local_ce0 : STD_LOGIC;
    signal grp_matrix_multiplier_Pipeline_L2_fu_91_x_local_we0 : STD_LOGIC;
    signal grp_matrix_multiplier_Pipeline_L2_fu_91_x_local_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_multiplier_Pipeline_L5_fu_99_ap_start : STD_LOGIC;
    signal grp_matrix_multiplier_Pipeline_L5_fu_99_ap_done : STD_LOGIC;
    signal grp_matrix_multiplier_Pipeline_L5_fu_99_ap_idle : STD_LOGIC;
    signal grp_matrix_multiplier_Pipeline_L5_fu_99_ap_ready : STD_LOGIC;
    signal grp_matrix_multiplier_Pipeline_L5_fu_99_x_local_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix_multiplier_Pipeline_L5_fu_99_x_local_ce0 : STD_LOGIC;
    signal grp_matrix_multiplier_Pipeline_L5_fu_99_y_tmp_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_multiplier_Pipeline_L5_fu_99_y_tmp_out_ap_vld : STD_LOGIC;
    signal grp_matrix_multiplier_Pipeline_L2_fu_91_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_matrix_multiplier_Pipeline_L5_fu_99_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_fu_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln7_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln7_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j_fu_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln14_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln13_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_fu_62 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln13_fu_177_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_108_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_108_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln13_fu_196_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrix_multiplier_matrix_multiplier_Pipeline_L2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        empty : IN STD_LOGIC_VECTOR (3 downto 0);
        cmp2 : IN STD_LOGIC_VECTOR (0 downto 0);
        x_local_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        x_local_ce0 : OUT STD_LOGIC;
        x_local_we0 : OUT STD_LOGIC;
        x_local_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bitcast_ln9 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_multiplier_matrix_multiplier_Pipeline_L5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m : IN STD_LOGIC_VECTOR (31 downto 0);
        empty : IN STD_LOGIC_VECTOR (3 downto 0);
        x_local_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        x_local_ce0 : OUT STD_LOGIC;
        x_local_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bitcast_ln17 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_tmp_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_tmp_out_ap_vld : OUT STD_LOGIC );
    end component;


    component matrix_multiplier_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component matrix_multiplier_x_local_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    x_local_U : component matrix_multiplier_x_local_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_local_address0,
        ce0 => x_local_ce0,
        we0 => x_local_we0,
        d0 => grp_matrix_multiplier_Pipeline_L2_fu_91_x_local_d0,
        q0 => x_local_q0);

    grp_matrix_multiplier_Pipeline_L2_fu_91 : component matrix_multiplier_matrix_multiplier_Pipeline_L2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_multiplier_Pipeline_L2_fu_91_ap_start,
        ap_done => grp_matrix_multiplier_Pipeline_L2_fu_91_ap_done,
        ap_idle => grp_matrix_multiplier_Pipeline_L2_fu_91_ap_idle,
        ap_ready => grp_matrix_multiplier_Pipeline_L2_fu_91_ap_ready,
        empty => trunc_ln7_reg_260,
        cmp2 => cmp2_reg_247,
        x_local_address0 => grp_matrix_multiplier_Pipeline_L2_fu_91_x_local_address0,
        x_local_ce0 => grp_matrix_multiplier_Pipeline_L2_fu_91_x_local_ce0,
        x_local_we0 => grp_matrix_multiplier_Pipeline_L2_fu_91_x_local_we0,
        x_local_d0 => grp_matrix_multiplier_Pipeline_L2_fu_91_x_local_d0,
        bitcast_ln9 => bitcast_ln9_reg_252);

    grp_matrix_multiplier_Pipeline_L5_fu_99 : component matrix_multiplier_matrix_multiplier_Pipeline_L5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_multiplier_Pipeline_L5_fu_99_ap_start,
        ap_done => grp_matrix_multiplier_Pipeline_L5_fu_99_ap_done,
        ap_idle => grp_matrix_multiplier_Pipeline_L5_fu_99_ap_idle,
        ap_ready => grp_matrix_multiplier_Pipeline_L5_fu_99_ap_ready,
        m => m,
        empty => trunc_ln14_reg_306,
        x_local_address0 => grp_matrix_multiplier_Pipeline_L5_fu_99_x_local_address0,
        x_local_ce0 => grp_matrix_multiplier_Pipeline_L5_fu_99_x_local_ce0,
        x_local_q0 => x_local_q0,
        bitcast_ln17 => bitcast_ln17_reg_285,
        y_tmp_out => grp_matrix_multiplier_Pipeline_L5_fu_99_y_tmp_out,
        y_tmp_out_ap_vld => grp_matrix_multiplier_Pipeline_L5_fu_99_y_tmp_out_ap_vld);

    mul_32ns_32ns_64_2_1_U14 : component matrix_multiplier_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_108_p0,
        din1 => grp_fu_108_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_108_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_matrix_multiplier_Pipeline_L2_fu_91_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_multiplier_Pipeline_L2_fu_91_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_matrix_multiplier_Pipeline_L2_fu_91_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_multiplier_Pipeline_L2_fu_91_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_multiplier_Pipeline_L2_fu_91_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_multiplier_Pipeline_L5_fu_99_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_multiplier_Pipeline_L5_fu_99_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_matrix_multiplier_Pipeline_L5_fu_99_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_multiplier_Pipeline_L5_fu_99_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_multiplier_Pipeline_L5_fu_99_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_46 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln7_fu_130_p2 = ap_const_lv1_0))) then 
                i_fu_46 <= add_ln7_fu_135_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln7_fu_130_p2 = ap_const_lv1_1))) then 
                indvar_flatten_fu_62 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln13_fu_172_p2 = ap_const_lv1_0))) then 
                indvar_flatten_fu_62 <= add_ln13_fu_177_p2;
            end if; 
        end if;
    end process;

    j_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln7_fu_130_p2 = ap_const_lv1_1))) then 
                j_fu_58 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_fu_58 <= add_ln14_fu_207_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                bitcast_ln17_reg_285 <= bitcast_ln17_fu_165_p1;
                mul_ln17_reg_290 <= grp_fu_108_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                bitcast_ln9_reg_252 <= bitcast_ln9_fu_118_p1;
                cmp2_reg_247 <= cmp2_fu_112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln14_reg_301 <= icmp_ln14_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                trunc_ln14_reg_306 <= trunc_ln14_fu_202_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln7_reg_260 <= trunc_ln7_fu_141_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state6, grp_matrix_multiplier_Pipeline_L2_fu_91_ap_done, grp_matrix_multiplier_Pipeline_L5_fu_99_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state8, icmp_ln7_fu_130_p2, icmp_ln13_fu_172_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln7_fu_130_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_matrix_multiplier_Pipeline_L2_fu_91_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln13_fu_172_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_matrix_multiplier_Pipeline_L5_fu_99_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln13_fu_177_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_62) + unsigned(ap_const_lv64_1));
    add_ln14_fu_207_p2 <= std_logic_vector(unsigned(select_ln13_fu_196_p3) + unsigned(ap_const_lv32_1));
    add_ln7_fu_135_p2 <= std_logic_vector(unsigned(i_fu_46) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_matrix_multiplier_Pipeline_L2_fu_91_ap_done)
    begin
        if ((grp_matrix_multiplier_Pipeline_L2_fu_91_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_matrix_multiplier_Pipeline_L5_fu_99_ap_done)
    begin
        if ((grp_matrix_multiplier_Pipeline_L5_fu_99_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state6, icmp_ln13_fu_172_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln13_fu_172_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln13_fu_172_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln13_fu_172_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln17_fu_165_p1 <= A;
    bitcast_ln9_fu_118_p1 <= x;
    cmp2_fu_112_p2 <= "1" when (m = ap_const_lv32_0) else "0";
    grp_fu_108_p0 <= zext_ln17_fu_150_p1(32 - 1 downto 0);
    grp_fu_108_p1 <= zext_ln17_fu_150_p1(32 - 1 downto 0);
    grp_matrix_multiplier_Pipeline_L2_fu_91_ap_start <= grp_matrix_multiplier_Pipeline_L2_fu_91_ap_start_reg;
    grp_matrix_multiplier_Pipeline_L5_fu_99_ap_start <= grp_matrix_multiplier_Pipeline_L5_fu_99_ap_start_reg;
    icmp_ln13_fu_172_p2 <= "1" when (indvar_flatten_fu_62 = mul_ln17_reg_290) else "0";
    icmp_ln14_fu_186_p2 <= "1" when (j_fu_58 = m) else "0";
    icmp_ln7_fu_130_p2 <= "1" when (i_fu_46 = m) else "0";
    select_ln13_fu_196_p3 <= 
        ap_const_lv32_0 when (icmp_ln14_reg_301(0) = '1') else 
        j_fu_58;
    trunc_ln14_fu_202_p1 <= select_ln13_fu_196_p3(4 - 1 downto 0);
    trunc_ln7_fu_141_p1 <= i_fu_46(4 - 1 downto 0);

    x_local_address0_assign_proc : process(grp_matrix_multiplier_Pipeline_L2_fu_91_x_local_address0, grp_matrix_multiplier_Pipeline_L5_fu_99_x_local_address0, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_local_address0 <= grp_matrix_multiplier_Pipeline_L5_fu_99_x_local_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_local_address0 <= grp_matrix_multiplier_Pipeline_L2_fu_91_x_local_address0;
        else 
            x_local_address0 <= "XXXX";
        end if; 
    end process;


    x_local_ce0_assign_proc : process(grp_matrix_multiplier_Pipeline_L2_fu_91_x_local_ce0, grp_matrix_multiplier_Pipeline_L5_fu_99_x_local_ce0, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_local_ce0 <= grp_matrix_multiplier_Pipeline_L5_fu_99_x_local_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_local_ce0 <= grp_matrix_multiplier_Pipeline_L2_fu_91_x_local_ce0;
        else 
            x_local_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_local_we0_assign_proc : process(grp_matrix_multiplier_Pipeline_L2_fu_91_x_local_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_local_we0 <= grp_matrix_multiplier_Pipeline_L2_fu_91_x_local_we0;
        else 
            x_local_we0 <= ap_const_logic_0;
        end if; 
    end process;

    y <= grp_matrix_multiplier_Pipeline_L5_fu_99_y_tmp_out;

    y_ap_vld_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln17_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m),64));
end behav;
